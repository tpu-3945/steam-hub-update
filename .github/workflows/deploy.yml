# Nom du workflow qui appara√Ætra dans l'onglet "Actions" de votre d√©p√¥t GitHub
name: D√©ployer sur GitHub Pages

# D√©clencheur : Ce workflow s'ex√©cute √† chaque fois que vous poussez du code sur la branche "main"
on:
  push:
    branches: [ "main" ]

# Permissions : Autorise le workflow √† √©crire sur la section "Pages" de votre d√©p√¥t
permissions:
  contents: read
  pages: write
  id-token: write

# T√¢ches √† ex√©cuter
jobs:
  build-and-deploy:
    # Utilise la derni√®re version d'Ubuntu comme environnement d'ex√©cution
    runs-on: ubuntu-latest
    
    steps:
      # √âtape 1 : R√©cup√®re le code de votre d√©p√¥t pour que le workflow puisse l'utiliser
      - name: R√©cup√©ration du code üõéÔ∏è
        uses: actions/checkout@v4 # <-- Mis √† jour de v3 √† v4

      # √âtape 2 : Installe Node.js, l'environnement n√©cessaire pour faire tourner React et npm
      - name: Installation de Node.js üü©
        uses: actions/setup-node@v4 # <-- Mis √† jour de v3 √† v4
        with:
          node-version: '18' 
          cache: 'npm'       

      # √âtape 3 : Installe toutes les d√©pendances de votre projet (React, etc.)
      - name: Installation des d√©pendances üì¶
        run: npm ci 

      # √âtape 4 : Construit l'application pour la production. 
      - name: Construction du projet üèóÔ∏è
        run: npm run build

      # √âtape 5 : Configure GitHub Pages pour accepter le d√©ploiement
      - name: Configuration de GitHub Pages ‚öôÔ∏è
        uses: actions/configure-pages@v5 # <-- Mis √† jour de v3 √† v5

      # √âtape 6 : Uploade le dossier 'build' comme un "artefact" que GitHub Pages peut utiliser
      - name: Upload de l'artefact ‚¨ÜÔ∏è
        uses: actions/upload-pages-artifact@v3 # <-- CORRECTION PRINCIPALE : Mis √† jour de v2 √† v3
        with:
          path: './build'

      # √âtape 7 : D√©ploie l'artefact upload√© sur GitHub Pages
      - name: D√©ploiement sur GitHub Pages üöÄ
        id: deployment
        uses: actions/deploy-pages@v4 # <-- Mis √† jour de v2 √† v4
